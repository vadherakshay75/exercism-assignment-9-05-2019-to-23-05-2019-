continue
str.include?(%w[A T C G])
exit
continue
valid(str)
continue
valid(str)
exit
continue
valid(str)
raise ArgumentError unless valid(str)
exit
continue
char.include?(%w[A T C G])
return false unless char.include?(%w[A T C G])
char.include?(%w[A T C G])
char
exit
'hello' if char.include?(%w[A T C G])
'hello' unless char.include?(%w[A T C G])
unless char.include?(%w[A T C G])
char.include? (%w[A T C G J])
char.include? (%w[A T C G])
char
continue
exit
return false unless array.include?(%w[A T C G])
array.include?(%w[A T C G])
char
continue
array.each do |chart|
array.each do |char|
array = str.chars
array = str.chars.
continue
str.chars.include? "A"
str.chars
str
exit
continue
hash
hash['T'] = count('T')
hash['A'] = count('A')
hash
hash = {}
chars.uniq
chars
keys
continue
count(chars.uniq.first)
continue
count(chars.uniq.last)
count(chars.uniq.first)
chars.uniq
chars
self
this
String
continue
params
str
@demo
continue
@demo
demo
continue
demo
continue
demo
@demo
continue
@demo
demo
exit
@demo
@demom
demo
exit
@hash
hash
exit
@hash
hash
exit
hash
@hash
exit
@hash
@hash[1]
hash
exit
@hash[1]
@hash
hash
exit
@hash
hash
exit
@hash['A'] = 1
@hash[A] = 1
@hash
hash
exit
hash[:A]
hash[:a]
@hash
hash
str.chars.uniq
str.chars
str.char
str
